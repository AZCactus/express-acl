{
    "docs": [
        {
            "location": "/", 
            "text": "Express Acl\n\n\nThis is NodeJs runtime module that Implements ACL for expressJS Application. Its is designed to provide configuration approach to ACL implemantation as saving you the nightmare of writing countless middlewares. It suppports JSON and YAML as the configuration syntax.\n\n\nInstallation\n\n\nExample usage\n\n\n  const express = require('express');\n  const acl = require('express-acl');\n  const app = express()\n\n  // load acl configuration, from acl file\n  // default filename is nacl.json or nacl.yml\n\n  acl.config({\n    baseUrl:'api',\n  })\n\n  // Call the acl authorize middleware\n  app.use(acl.authorize);", 
            "title": "Home"
        }, 
        {
            "location": "/#express-acl", 
            "text": "This is NodeJs runtime module that Implements ACL for expressJS Application. Its is designed to provide configuration approach to ACL implemantation as saving you the nightmare of writing countless middlewares. It suppports JSON and YAML as the configuration syntax.  Installation", 
            "title": "Express Acl"
        }, 
        {
            "location": "/#example-usage", 
            "text": "const express = require('express');\n  const acl = require('express-acl');\n  const app = express()\n\n  // load acl configuration, from acl file\n  // default filename is nacl.json or nacl.yml\n\n  acl.config({\n    baseUrl:'api',\n  })\n\n  // Call the acl authorize middleware\n  app.use(acl.authorize);", 
            "title": "Example usage"
        }, 
        {
            "location": "/documentation/getting-started/", 
            "text": "Installation\n\n\nExpress Acl is available via NPM registry\n\n\n\n$ npm install express-acl --save\n\n\n\n\n\nConfiguration\n\n\nExpress acl uses acl rules to manage and protect your resources, They have to be loaded and configured before being used.\n\n\n  const acl = require('express-acl');\n\n  // Call the config method and pass in the  options\n  acl.config({\n    baseUrl:'api',\n    yml:true\n  });\n\n\n\n\n\nFor more details check the \nconfiguration options\n page\n\n\nAdding Rules\n\n\nThe config method loads the rules for the local file. By default this module will look for \nnacl.json\n file in the root folder of your project. This can be overidden by adding more options to the config method as we have added yml which will look for \nnacl.yml\n file instead.\n\n\n- group: user\n  permissions:\n    - resource: users\n      methods:\n        - GET\n        - POST\n        - DELETE\n      action: allow\n\n\n\n\nThis file instructs this module on how to manage access to your resources. The contets of this file will be covered in details in the \nAcl rules\n section\n\n\nAuthentication\n\n\nExpress Acl depends on the \nrole\n of each authenticated user to pick the corresponding ACL policy for each defined user groups. Therefore, You should always place the acl middleware after the authenticate middleware.\n\n\nBelow is an example of an Authenticatio middleware implementation using jsonwebtokens.\n\n\n  ROUTER.use(function(req, res, next) {\n    var token = req.headers['x-access-token'];\n    if (token) {\n      jwt.verify(token, key, function(err, decoded) {\n        if (err) {\n          return res.send(err);\n        } else {\n          req.decoded = decoded;\n          next();\n        }\n      });\n    }\n  });\n\n\n\n\n\nAuthorize\n\n\nThe acl module provides a middleware \nauthorize\n. This middleware should be placed after the authentication middleware. It will intercept all the requests made for all the resources and apply relevant policies ton these to either deny or allow access depending on the configuration.\n\n\n\nROUTER.use(acl.authorize);\n\n\n\n\n\nOnce this middware is called, express-acl will pick the role from the authenticated user,and apply corresponding polices dependng on he role and resource sbeing requested for.", 
            "title": "Getting started"
        }, 
        {
            "location": "/documentation/getting-started/#installation", 
            "text": "Express Acl is available via NPM registry  \n$ npm install express-acl --save", 
            "title": "Installation"
        }, 
        {
            "location": "/documentation/getting-started/#configuration", 
            "text": "Express acl uses acl rules to manage and protect your resources, They have to be loaded and configured before being used.    const acl = require('express-acl');\n\n  // Call the config method and pass in the  options\n  acl.config({\n    baseUrl:'api',\n    yml:true\n  });  For more details check the  configuration options  page", 
            "title": "Configuration"
        }, 
        {
            "location": "/documentation/getting-started/#adding-rules", 
            "text": "The config method loads the rules for the local file. By default this module will look for  nacl.json  file in the root folder of your project. This can be overidden by adding more options to the config method as we have added yml which will look for  nacl.yml  file instead.  - group: user\n  permissions:\n    - resource: users\n      methods:\n        - GET\n        - POST\n        - DELETE\n      action: allow  This file instructs this module on how to manage access to your resources. The contets of this file will be covered in details in the  Acl rules  section", 
            "title": "Adding Rules"
        }, 
        {
            "location": "/documentation/getting-started/#authentication", 
            "text": "Express Acl depends on the  role  of each authenticated user to pick the corresponding ACL policy for each defined user groups. Therefore, You should always place the acl middleware after the authenticate middleware.  Below is an example of an Authenticatio middleware implementation using jsonwebtokens.    ROUTER.use(function(req, res, next) {\n    var token = req.headers['x-access-token'];\n    if (token) {\n      jwt.verify(token, key, function(err, decoded) {\n        if (err) {\n          return res.send(err);\n        } else {\n          req.decoded = decoded;\n          next();\n        }\n      });\n    }\n  });", 
            "title": "Authentication"
        }, 
        {
            "location": "/documentation/getting-started/#authorize", 
            "text": "The acl module provides a middleware  authorize . This middleware should be placed after the authentication middleware. It will intercept all the requests made for all the resources and apply relevant policies ton these to either deny or allow access depending on the configuration.  \nROUTER.use(acl.authorize);  Once this middware is called, express-acl will pick the role from the authenticated user,and apply corresponding polices dependng on he role and resource sbeing requested for.", 
            "title": "Authorize"
        }, 
        {
            "location": "/documentation/configuration/", 
            "text": "Overview\n\n\nThis are the options that are passed to the config method. This options determin how the rules will be loaded and how resource matching should start from.\n\n\nOptions\n\n\nThe config method takes in an object with possible five parameters, They include\n\n\n\n\nfilename: \nstring\n\n\npath: \nstring\n\n\nyml: \nboolean\n\n\nencoding: \nstring\n\n\nbaseUrl: \nstring\n\n\n\n\nFilename \nfilename [optional]\n\n\nThis property holds the name of the file that contains the acl configurations. By default express-acl will look for \nnacl.json\n or \nnacl.yml\n in the root folder of your project. If you plan to change the name you can specify the name of your file in this property.\n\n\n\n  const options = {\n    filename: 'anotherFile.json'\n  };\n\n  acl.config(options);\n\n\n\n\n\nIts important to note that the filename should have an extension attached to it e.g \n.json\n or \n.yml\n.\n\n\nPath \npath [optional]\n\n\nThis property specifies the location of the configuration file. By default the acl configuration file is located in the root folder of the project. However sometimes you may want to place this file among other configuration files of your project. You can achieve this by adding the location of the file relative to the root folder.\n\n\nIf the config folder is \n/server/config\n, then we can configure the path property as shown below.\n\n\n  const options = {\n    filename: 'acl.json',\n    path:'server/config'\n  };\n\n  acl.config(options);\n\n\n\n\n\nBasically what this means is that, you are instructing express-acl to go to the \nserver/config\n folder and load the contents of \nacl.json\n.\n\n\nFile Type \nyml [optional]\n.\n\n\nExpress acl supports two types of configuration syntax. \nJSON\n and \nyml\n. By default it uses JSON as its primary syntax, however you can change to whichever syntax that works for you.\n\n\nThis property is false by default therefore if you want to use \nyml\n as your syntax then change it to true. This will instruct express-acl to use a \nYAML\n parser instead of the \nJSON\n parser.\n\n\n  const options = {\n    filename:'acl.yml',\n    path:'server/config',\n    yml:true\n  };\n\n  acl.config(options);\n\n\n\n\n\nEncoding \nencoding [optional]\n.\n\n\nThis is the encoding type \nfs\n module uses to read nacl file. For more information refer to the \nfile system \n Nodejs documentation.\n\n\nBase URL \nbaseUrl [required]\n.\n\n\nThe base URL represent the prefix of your API. This can either be \napi\n,\nv1\n,\n/developer/v1\n etc. This is important because express-acl will use this url to map the location of the resources. Take an example of the following url \n/api/users\n.\n\n\nIn this URL our resource is users,and the base URL being \napi\n. If we donot specify the base URL express will treat \napi\n as our resource instead of \nusers\n.\n\n\n  const options = {\n    filename:'acl.yml',\n    path:'server/config',\n    baseUrl:'api'\n    yml:true\n  };\n\n  acl.config(options);", 
            "title": "Configuration options"
        }, 
        {
            "location": "/documentation/configuration/#overview", 
            "text": "This are the options that are passed to the config method. This options determin how the rules will be loaded and how resource matching should start from.", 
            "title": "Overview"
        }, 
        {
            "location": "/documentation/configuration/#options", 
            "text": "The config method takes in an object with possible five parameters, They include   filename:  string  path:  string  yml:  boolean  encoding:  string  baseUrl:  string", 
            "title": "Options"
        }, 
        {
            "location": "/documentation/configuration/#filename-filename-optional", 
            "text": "This property holds the name of the file that contains the acl configurations. By default express-acl will look for  nacl.json  or  nacl.yml  in the root folder of your project. If you plan to change the name you can specify the name of your file in this property.  \n  const options = {\n    filename: 'anotherFile.json'\n  };\n\n  acl.config(options);  Its important to note that the filename should have an extension attached to it e.g  .json  or  .yml .", 
            "title": "Filename filename [optional]"
        }, 
        {
            "location": "/documentation/configuration/#path-path-optional", 
            "text": "This property specifies the location of the configuration file. By default the acl configuration file is located in the root folder of the project. However sometimes you may want to place this file among other configuration files of your project. You can achieve this by adding the location of the file relative to the root folder.  If the config folder is  /server/config , then we can configure the path property as shown below.    const options = {\n    filename: 'acl.json',\n    path:'server/config'\n  };\n\n  acl.config(options);  Basically what this means is that, you are instructing express-acl to go to the  server/config  folder and load the contents of  acl.json .", 
            "title": "Path path [optional]"
        }, 
        {
            "location": "/documentation/configuration/#file-type-yml-optional", 
            "text": "Express acl supports two types of configuration syntax.  JSON  and  yml . By default it uses JSON as its primary syntax, however you can change to whichever syntax that works for you.  This property is false by default therefore if you want to use  yml  as your syntax then change it to true. This will instruct express-acl to use a  YAML  parser instead of the  JSON  parser.    const options = {\n    filename:'acl.yml',\n    path:'server/config',\n    yml:true\n  };\n\n  acl.config(options);", 
            "title": "File Type yml [optional]."
        }, 
        {
            "location": "/documentation/configuration/#encoding-encoding-optional", 
            "text": "This is the encoding type  fs  module uses to read nacl file. For more information refer to the  file system   Nodejs documentation.", 
            "title": "Encoding encoding [optional]."
        }, 
        {
            "location": "/documentation/configuration/#base-url-baseurl-required", 
            "text": "The base URL represent the prefix of your API. This can either be  api , v1 , /developer/v1  etc. This is important because express-acl will use this url to map the location of the resources. Take an example of the following url  /api/users .  In this URL our resource is users,and the base URL being  api . If we donot specify the base URL express will treat  api  as our resource instead of  users .    const options = {\n    filename:'acl.yml',\n    path:'server/config',\n    baseUrl:'api'\n    yml:true\n  };\n\n  acl.config(options);", 
            "title": "Base URL baseUrl [required]."
        }, 
        {
            "location": "/documentation/acl-rules/", 
            "text": "", 
            "title": "Acl rules"
        }, 
        {
            "location": "/contribution/", 
            "text": "", 
            "title": "Contribution"
        }
    ]
}