{
    "docs": [
        {
            "location": "/",
            "text": "Express Acl\n\n\nThis is NodeJs runtime module that Implements ACL for expressJS Application. Its is designed to provide configuration approach to ACL implemantation as saving you the nightmare of writing countless middlewares. It suppports JSON and YAML as the configuration syntax.\n\n\nInstallation\n\n\nExample usage\n\n\n  \nconst\n \nexpress\n \n=\n \nrequire\n(\n'express'\n);\n\n  \nconst\n \nacl\n \n=\n \nrequire\n(\n'express-acl'\n);\n\n  \nconst\n \napp\n \n=\n \nexpress\n()\n\n\n  \n// load acl configuration, from acl file\n\n  \n// default filename is nacl.json or nacl.yml\n\n\n  \nacl\n.\nconfig\n({\n\n    \nbaseUrl\n:\n'api'\n,\n\n  \n})\n\n\n  \n// Call the acl authorize middleware\n\n  \napp\n.\nuse\n(\nacl\n.\nauthorize\n);",
            "title": "Home"
        },
        {
            "location": "/#express-acl",
            "text": "This is NodeJs runtime module that Implements ACL for expressJS Application. Its is designed to provide configuration approach to ACL implemantation as saving you the nightmare of writing countless middlewares. It suppports JSON and YAML as the configuration syntax.  Installation",
            "title": "Express Acl"
        },
        {
            "location": "/#example-usage",
            "text": "const   express   =   require ( 'express' ); \n   const   acl   =   require ( 'express-acl' ); \n   const   app   =   express () \n\n   // load acl configuration, from acl file \n   // default filename is nacl.json or nacl.yml \n\n   acl . config ({ \n     baseUrl : 'api' , \n   }) \n\n   // Call the acl authorize middleware \n   app . use ( acl . authorize );",
            "title": "Example usage"
        },
        {
            "location": "/documentation/getting-started/",
            "text": "Installation\n\n\nExpress Acl is available via NPM registry\n\n\n$ npm install express-acl --save\n\n\n\n\n\nConfiguration\n\n\nExpress acl uses acl rules to manage and protect your resources, They have to be loaded and configured before being used.\n\n\n  \nconst\n \nacl\n \n=\n \nrequire\n(\n'express-acl'\n);\n\n\n  \n// Call the config method and pass in the  options\n\n  \nacl\n.\nconfig\n({\n\n    \nbaseUrl\n:\n'api'\n,\n\n    \nyml\n:\ntrue\n\n  \n});\n\n\n\n\n\n\nFor more details check the \nconfiguration options\n page\n\n\nAdding Rules\n\n\nThe config method loads the rules for the local file. By default this module will look for \nnacl.json\n file in the root folder of your project. This can be overidden by adding more options to the config method as we have added yml which will look for \nnacl.yml\n file instead.\n\n\n-\n \ngroup\n:\n \nuser\n\n  \npermissions\n:\n\n    \n-\n \nresource\n:\n \nusers\n\n      \nmethods\n:\n\n        \n-\n \nGET\n\n        \n-\n \nPOST\n\n        \n-\n \nDELETE\n\n      \naction\n:\n \nallow\n\n\n\n\n\n\nThis file instructs this module on how to manage access to your resources. The contets of this file will be covered in details in the \nAcl rules\n section\n\n\nAuthentication\n\n\nExpress Acl depends on the \nrole\n of each authenticated user to pick the corresponding ACL policy for each defined user groups. Therefore, You should always place the acl middleware after the authenticate middleware.\n\n\nBelow is an example of an Authenticatio middleware implementation using jsonwebtokens.\n\n\n  \nROUTER\n.\nuse\n(\nfunction\n(\nreq\n,\n \nres\n,\n \nnext\n)\n \n{\n\n    \nvar\n \ntoken\n \n=\n \nreq\n.\nheaders\n[\n'x-access-token'\n];\n\n    \nif\n \n(\ntoken\n)\n \n{\n\n      \njwt\n.\nverify\n(\ntoken\n,\n \nkey\n,\n \nfunction\n(\nerr\n,\n \ndecoded\n)\n \n{\n\n        \nif\n \n(\nerr\n)\n \n{\n\n          \nreturn\n \nres\n.\nsend\n(\nerr\n);\n\n        \n}\n \nelse\n \n{\n\n          \nreq\n.\ndecoded\n \n=\n \ndecoded\n;\n\n          \nnext\n();\n\n        \n}\n\n      \n});\n\n    \n}\n\n  \n});\n\n\n\n\n\n\nAuthorize\n\n\nThe acl module provides a middleware \nauthorize\n. This middleware should be placed after the authentication middleware. It will intercept all the requests made for all the resources and apply relevant policies ton these to either deny or allow access depending on the configuration.\n\n\nROUTER\n.\nuse\n(\nacl\n.\nauthorize\n);\n\n\n\n\n\n\nOnce this middware is called, express-acl will pick the role from the authenticated user,and apply corresponding polices dependng on he role and resource sbeing requested for.",
            "title": "Getting started"
        },
        {
            "location": "/documentation/getting-started/#installation",
            "text": "Express Acl is available via NPM registry  $ npm install express-acl --save",
            "title": "Installation"
        },
        {
            "location": "/documentation/getting-started/#configuration",
            "text": "Express acl uses acl rules to manage and protect your resources, They have to be loaded and configured before being used.     const   acl   =   require ( 'express-acl' ); \n\n   // Call the config method and pass in the  options \n   acl . config ({ \n     baseUrl : 'api' , \n     yml : true \n   });   For more details check the  configuration options  page",
            "title": "Configuration"
        },
        {
            "location": "/documentation/getting-started/#adding-rules",
            "text": "The config method loads the rules for the local file. By default this module will look for  nacl.json  file in the root folder of your project. This can be overidden by adding more options to the config method as we have added yml which will look for  nacl.yml  file instead.  -   group :   user \n   permissions : \n     -   resource :   users \n       methods : \n         -   GET \n         -   POST \n         -   DELETE \n       action :   allow   This file instructs this module on how to manage access to your resources. The contets of this file will be covered in details in the  Acl rules  section",
            "title": "Adding Rules"
        },
        {
            "location": "/documentation/getting-started/#authentication",
            "text": "Express Acl depends on the  role  of each authenticated user to pick the corresponding ACL policy for each defined user groups. Therefore, You should always place the acl middleware after the authenticate middleware.  Below is an example of an Authenticatio middleware implementation using jsonwebtokens.     ROUTER . use ( function ( req ,   res ,   next )   { \n     var   token   =   req . headers [ 'x-access-token' ]; \n     if   ( token )   { \n       jwt . verify ( token ,   key ,   function ( err ,   decoded )   { \n         if   ( err )   { \n           return   res . send ( err ); \n         }   else   { \n           req . decoded   =   decoded ; \n           next (); \n         } \n       }); \n     } \n   });",
            "title": "Authentication"
        },
        {
            "location": "/documentation/getting-started/#authorize",
            "text": "The acl module provides a middleware  authorize . This middleware should be placed after the authentication middleware. It will intercept all the requests made for all the resources and apply relevant policies ton these to either deny or allow access depending on the configuration.  ROUTER . use ( acl . authorize );   Once this middware is called, express-acl will pick the role from the authenticated user,and apply corresponding polices dependng on he role and resource sbeing requested for.",
            "title": "Authorize"
        },
        {
            "location": "/documentation/configuration/",
            "text": "Overview\n\n\nThis are the options that are passed to the config method. This options determin how the rules will be loaded and how resource matching should start from.\n\n\nThe config method takes in an object with possible five parameters, They include\n\n\n\n\nfilename: \nString\n\n\npath: \nString\n\n\nyml: \nboolean\n\n\nbaseUrl: \nString\n\n\nrules: \nObject\n\n\ndefaultRole: \nString\n\n\ndecodedObjectName: \nString\n\n\nsearchPath: \nString\n\n\nencoding: \nString\n\n\nbaseUrl: \nString\n\n\n\n\nFilename\n\n\nfilename: <String> [optional]\n\n\nThis property holds the name of the file that contains the acl configurations. By default express-acl will look for \nnacl.json\n or \nnacl.yml\n in the root folder of your project. If you plan to change the name you can specify the name of your file in this property.\n\n\n  \nconst\n \noptions\n \n=\n \n{\n\n    \nfilename\n:\n \n'anotherFile.json'\n\n  \n};\n\n\n  \nacl\n.\nconfig\n(\noptions\n);\n\n\n\n\n\n\nIts important to note that the filename should have an extension attached to it e.g \n.json\n or \n.yml\n.\n\n\nPath\n\n\npath: <String> [optional]\n\n\nThis property specifies the location of the configuration file. By default the acl configuration file is located in the root folder of the project. However sometimes you may want to place this file among other configuration files of your project. You can achieve this by adding the location of the file relative to the root folder.\n\n\nIf the config folder is \n/server/config\n, then we can configure the path property as shown below.\n\n\n  \nconst\n \noptions\n \n=\n \n{\n\n    \nfilename\n:\n \n'acl.json'\n,\n\n    \npath\n:\n'server/config'\n\n  \n};\n\n\n  \nacl\n.\nconfig\n(\noptions\n);\n\n\n\n\n\n\nBasically what this means is that, you are instructing express-acl to go to the \nserver/config\n folder and load the contents of \nacl.json\n.\n\n\nFile Type\n\n\nyml: <Boolean> [optional]\n\n\nExpress acl supports two types of configuration syntax. \nJSON\n and \nyml\n. By default it uses JSON as its primary syntax, however you can change to whichever syntax that works for you.\n\n\nThis property is false by default therefore if you want to use \nyml\n as your syntax then change it to true. This will instruct express-acl to use a \nYAML\n parser instead of the \nJSON\n parser.\n\n\n  \nconst\n \noptions\n \n=\n \n{\n\n    \nfilename\n:\n'acl.yml'\n,\n\n    \npath\n:\n'server/config'\n,\n\n    \nyml\n:\ntrue\n\n  \n};\n\n\n  \nacl\n.\nconfig\n(\noptions\n);\n\n\n\n\n\n\nEncoding\n\n\nencoding: <String> [optional]\n\n\nThis is the encoding type \nfs\n module uses to read nacl file. For more information refer to the \nfile system \n Nodejs documentation.\n\n\nBase URL\n\n\nbaseUrl: <String> [required]\n\n\nThe base URL represent the prefix of your API. This can either be \napi\n,\nv1\n,\n/developer/v1\n etc. This is important because express-acl will use this url to map the location of the resources. Take an example of the following url \n/api/users\n.\n\n\nIn this URL our resource is users,and the base URL being \napi\n. If we donot specify the base URL express will treat \napi\n as our resource instead of \nusers\n.\n\n\nconst\n \noptions\n \n=\n \n{\n\n  \nfilename\n:\n'acl.yml'\n,\n\n  \npath\n:\n'server/config'\n,\n\n  \nbaseUrl\n:\n'api'\n\n  \nyml\n:\ntrue\n\n\n};\n\n\n\nacl\n.\nconfig\n(\noptions\n);\n\n\n\n\n\n\nRules\n\n\nrules: <String> [optional]\n\n\nIf you are not willing to use either json file or yml configuration you can pass the config method an array of rules. This can be rules saved in an external source such as database or a js file in your project.\n\n\nconst\n \narrayOfRules\n \n=\n \n[\n\n  \n{\n\n    \ngroup\n:\n \n\"admin\"\n,\n\n    \npermissions\n:\n \n[\n\n      \n{\n\n        \nresource\n:\n \n\"*\"\n,\n\n        \nmethods\n:\n \n\"*\"\n\n      \n}\n\n    \n],\n\n    \naction\n:\n \n\"allow\"\n\n  \n},\n\n\n];\n\n\n\n\nconst\n \noptions\n \n=\n \n{\n\n  \nbaseUrl\n:\n'api'\n,\n\n  \nrules\n:\n \nArrayOfRules\n,\n\n  \nyml\n:\ntrue\n\n\n};\n\n\n\nacl\n.\nconfig\n(\noptions\n);\n\n\n\n\n\n\nDefault Role\n\n\ndefaultRole: <String> [optional]\n\n\nIf You have a user in your system who has not been assigned a role, you can specify a role that will be assumed if such users exist. By the default this module will assign \nguest\n as a default role. You can override this by using \ndefaultRole\n property.\n\n\nacl\n.\nconfig\n({\n\n    \nyml\n:\n \ntrue\n,\n\n    \ndefaultRole\n:\n \n'anonymous'\n\n\n});\n\n\n\n\n\n\nSearch Path And Decoded Object Name\n\n\nThis two properties enable you to customize how and where your user role will be located in the request object. By default this module looks for \nreq.decoded.role\n, However this might be the case with everyone. if your decoed object uses different format you can specify using the above properties.\n\n\n\n\nNote\n\n\nBoth of these properties are use to locate the role in your request object, therefore  they cannot be used together.\nYou can only use on of each in your configuration.\n\n\n\n\nDecoded Object Name\n\n\ndecodedObjectName: <String> [optional]\n\n\nYou can use this method to specify the name of the object holding your user object, this can be user, session, etc. The default value for this is \ndecoded\n.\n\n\nacl\n.\nconfig\n({\n\n    \nyml\n:\n \ntrue\n,\n\n    \ndecodedObjectName\n:\n \n'user'\n\n\n});\n\n\n\n\n\n\nSearch Path\n\n\nsearchPath: <String> [optional]\n\n\nIn some cases your user object can have the role name nested deep into your object. With the above config this module will look for the role name in \nuser.role\n. If your role is nested in \nuser.role.name\n you can specify this path as a search path so that this module can be able to find your role.\n\n\nacl\n.\nconfig\n({\n\n    \nyml\n:\n \ntrue\n,\n\n    \nsearchPath\n:\n \n'user.role.name'\n\n\n});",
            "title": "Configuration options"
        },
        {
            "location": "/documentation/configuration/#overview",
            "text": "This are the options that are passed to the config method. This options determin how the rules will be loaded and how resource matching should start from.  The config method takes in an object with possible five parameters, They include   filename:  String  path:  String  yml:  boolean  baseUrl:  String  rules:  Object  defaultRole:  String  decodedObjectName:  String  searchPath:  String  encoding:  String  baseUrl:  String",
            "title": "Overview"
        },
        {
            "location": "/documentation/configuration/#filename",
            "text": "filename: <String> [optional]  This property holds the name of the file that contains the acl configurations. By default express-acl will look for  nacl.json  or  nacl.yml  in the root folder of your project. If you plan to change the name you can specify the name of your file in this property.     const   options   =   { \n     filename :   'anotherFile.json' \n   }; \n\n   acl . config ( options );   Its important to note that the filename should have an extension attached to it e.g  .json  or  .yml .",
            "title": "Filename"
        },
        {
            "location": "/documentation/configuration/#path",
            "text": "path: <String> [optional]  This property specifies the location of the configuration file. By default the acl configuration file is located in the root folder of the project. However sometimes you may want to place this file among other configuration files of your project. You can achieve this by adding the location of the file relative to the root folder.  If the config folder is  /server/config , then we can configure the path property as shown below.     const   options   =   { \n     filename :   'acl.json' , \n     path : 'server/config' \n   }; \n\n   acl . config ( options );   Basically what this means is that, you are instructing express-acl to go to the  server/config  folder and load the contents of  acl.json .",
            "title": "Path"
        },
        {
            "location": "/documentation/configuration/#file-type",
            "text": "yml: <Boolean> [optional]  Express acl supports two types of configuration syntax.  JSON  and  yml . By default it uses JSON as its primary syntax, however you can change to whichever syntax that works for you.  This property is false by default therefore if you want to use  yml  as your syntax then change it to true. This will instruct express-acl to use a  YAML  parser instead of the  JSON  parser.     const   options   =   { \n     filename : 'acl.yml' , \n     path : 'server/config' , \n     yml : true \n   }; \n\n   acl . config ( options );",
            "title": "File Type"
        },
        {
            "location": "/documentation/configuration/#encoding",
            "text": "encoding: <String> [optional]  This is the encoding type  fs  module uses to read nacl file. For more information refer to the  file system   Nodejs documentation.",
            "title": "Encoding"
        },
        {
            "location": "/documentation/configuration/#base-url",
            "text": "baseUrl: <String> [required]  The base URL represent the prefix of your API. This can either be  api , v1 , /developer/v1  etc. This is important because express-acl will use this url to map the location of the resources. Take an example of the following url  /api/users .  In this URL our resource is users,and the base URL being  api . If we donot specify the base URL express will treat  api  as our resource instead of  users .  const   options   =   { \n   filename : 'acl.yml' , \n   path : 'server/config' , \n   baseUrl : 'api' \n   yml : true  };  acl . config ( options );",
            "title": "Base URL"
        },
        {
            "location": "/documentation/configuration/#rules",
            "text": "rules: <String> [optional]  If you are not willing to use either json file or yml configuration you can pass the config method an array of rules. This can be rules saved in an external source such as database or a js file in your project.  const   arrayOfRules   =   [ \n   { \n     group :   \"admin\" , \n     permissions :   [ \n       { \n         resource :   \"*\" , \n         methods :   \"*\" \n       } \n     ], \n     action :   \"allow\" \n   },  ];  const   options   =   { \n   baseUrl : 'api' , \n   rules :   ArrayOfRules , \n   yml : true  };  acl . config ( options );",
            "title": "Rules"
        },
        {
            "location": "/documentation/configuration/#default-role",
            "text": "defaultRole: <String> [optional]  If You have a user in your system who has not been assigned a role, you can specify a role that will be assumed if such users exist. By the default this module will assign  guest  as a default role. You can override this by using  defaultRole  property.  acl . config ({ \n     yml :   true , \n     defaultRole :   'anonymous'  });",
            "title": "Default Role"
        },
        {
            "location": "/documentation/configuration/#search-path-and-decoded-object-name",
            "text": "This two properties enable you to customize how and where your user role will be located in the request object. By default this module looks for  req.decoded.role , However this might be the case with everyone. if your decoed object uses different format you can specify using the above properties.   Note  Both of these properties are use to locate the role in your request object, therefore  they cannot be used together.\nYou can only use on of each in your configuration.",
            "title": "Search Path And Decoded Object Name"
        },
        {
            "location": "/documentation/configuration/#decoded-object-name",
            "text": "decodedObjectName: <String> [optional]  You can use this method to specify the name of the object holding your user object, this can be user, session, etc. The default value for this is  decoded .  acl . config ({ \n     yml :   true , \n     decodedObjectName :   'user'  });",
            "title": "Decoded Object Name"
        },
        {
            "location": "/documentation/configuration/#search-path",
            "text": "searchPath: <String> [optional]  In some cases your user object can have the role name nested deep into your object. With the above config this module will look for the role name in  user.role . If your role is nested in  user.role.name  you can specify this path as a search path so that this module can be able to find your role.  acl . config ({ \n     yml :   true , \n     searchPath :   'user.role.name'  });",
            "title": "Search Path"
        },
        {
            "location": "/documentation/methods/",
            "text": "Api Methods\n\n\nauthorize\n\n\n[type: middleware]\n\n\n\n\n\nThis is the middleware that manages your application requests based on the role and acl rules.\n\n\napp\n.\nget\n(\nacl\n.\nauthorize\n);\n\n\n\n\n\n\nunless\n\n\n[type:function, params: function or object]\n\n\n\n\n\nBy default any route that has no defined policy against it is blocked, this means you cannot access this route untill you specify a policy.\nThis method enables you to exclude unprotected routes. This method uses express-unless package to achive this functionality.\nFor more details on its usage follow this link \nexpress-unless\n\n\n//assuming we want to hide /auth/google from express acl\n\n\n\napp\n.\nuse\n(\nacl\n.\nauthorize\n.\nunless\n({\npath\n:\n[\n'/auth/google'\n]}));\n\n\n\n\n\n\nAnytime that this route is visited, unless method will exlude it from being passed though our middleware.\n\n\n\n\nNote\n\n\nYou don't have to install express-unless it has already been included into the project.",
            "title": "Api Methods"
        },
        {
            "location": "/documentation/methods/#api-methods",
            "text": "",
            "title": "Api Methods"
        },
        {
            "location": "/documentation/methods/#authorize",
            "text": "[type: middleware]  This is the middleware that manages your application requests based on the role and acl rules.  app . get ( acl . authorize );",
            "title": "authorize"
        },
        {
            "location": "/documentation/methods/#unless",
            "text": "[type:function, params: function or object]  By default any route that has no defined policy against it is blocked, this means you cannot access this route untill you specify a policy.\nThis method enables you to exclude unprotected routes. This method uses express-unless package to achive this functionality.\nFor more details on its usage follow this link  express-unless  //assuming we want to hide /auth/google from express acl  app . use ( acl . authorize . unless ({ path : [ '/auth/google' ]}));   Anytime that this route is visited, unless method will exlude it from being passed though our middleware.   Note  You don't have to install express-unless it has already been included into the project.",
            "title": "unless"
        },
        {
            "location": "/documentation/rules/",
            "text": "ACL Rules\n\n\nExpress acl uses Rules to define what access should be given to certain user groups over specific resources.\n\n\nThe first step to making acl rules is by creating nacl.json or nacl.yml depending on the syntax you prefer to use. Below is an example of ACL rules using both syntax.\n\n\nJSON syntax\n\n\n[{\n\n  \n\"group\"\n:\n \n\"admin\"\n,\n\n  \n\"permissions\"\n:\n \n[{\n\n    \n\"resource\"\n:\n \n\"*\"\n,\n\n    \n\"methods\"\n:\n \n\"*\"\n\n  \n}],\n\n  \n\"action\"\n:\n \n\"allow\"\n\n  \n},\n \n{\n\n  \n\"group\"\n:\n \n\"user\"\n,\n\n  \n\"permissions\"\n:\n \n[{\n\n    \n\"resource\"\n:\n \n\"users\"\n,\n\n    \n\"methods\"\n:\n \n[\n\n      \n\"POST\"\n,\n\n      \n\"GET\"\n,\n\n      \n\"PUT\"\n\n    \n],\n\n    \n\"action\"\n:\n \n\"deny\"\n\n  \n}]\n\n\n}]\n\n\n\n\n\n\nYAML syntax\n\n\n- group: admin\n  permissions:\n    - resource: *\n      methods: *\n      action: allow\n\n- group: user\n  permissions:\n    - resource: users\n      methods:\n        - GET\n        - POST\n        - DELETE\n      action: deny\n\n\n\n\n\nUnderstanding ACL rules\n\n\nIts important to Understand each property that consitute an acl. Below is a table that has a Description of each property.\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroup\n\n\nstring\n\n\nThis property defines the access group to which a user can belong to  e.g \nuser\n, \nguest\n, \nadmin\n, \ntrainer\n. This may vary depending with the architecture of your application.\n\n\n\n\n\n\npermissions\n\n\nArray\n\n\nThis property contains an array of objects that define the resources exposed to a group and the methods allowed/denied\n\n\n\n\n\n\nresource\n\n\nstring\n\n\nThis is the resource that we are either giving access to. e.g \nblogs\n for route \n/api/blogs\n, \nusers\n for route \n/api/users\n. You can also specify a glob \n*\n for all resource/routes in your application(recommended for admin users only)\n\n\n\n\n\n\nmethods\n\n\nstring or Array\n\n\nThis are http methods that a user is allowed or denied from executing. \n[\"POST\", \"GET\", \"PUT\"]\n. use glob \n*\n if you want to include all http methods.\n\n\n\n\n\n\naction\n\n\nstring\n\n\nThis property tell express-acl what action to perform on the permission given. Using the above example, the user policy specifies a deny action, meaning all traffic on route \n/api/users\n for methods \nGET, PUT, POST\n are denied, but the rest allowed. And for the admin, all traffic for all resource is allowed.\n\n\n\n\n\n\n\n\nHow to write effective ACL Rules\n\n\nACLs define the way requests will be handled by express acl, therefore its important to ensure that they are well designed to maximise efficiency.In this section we are going to look at how to design a good ACL based on your application needs.\n\n\nAssuming you have a blog application, and you want to make blogs read only, deny user ability to delete their own account. You want the admin to have all the access on resources.\n\n\nsolution:\n\n\nadmin\n:\n\n  \nresource\n:\n \nall\n\n  \nmethods\n:\n \nall\n\n  \naction\n:\n \nallow\n\n\n\nuser\n:\n\n  \nresource\n:\n \nusers\n\n  \nmethods\n:\n\n    \n-\n \nDELETE\n\n  \naction\n:\n \ndeny\n\n\n  \nresource\n:\n \nblogs\n\n  \nmethods\n:\n\n    \n-\n \nGET\n\n  \naction\n:\n \nallow\n\n\n\n\n\n\nExplanation\n\n\nThe admin group has access to all resource and can perform all operation on any resource. Therefore, we need to allow all resources and methods. However, the user group is allowed to only read the blogs, create, read and update their own user profiles.\n\n\nYou may ask, why did we apply deny action on DELETE method instead of allowing other HTTP methods? In express-acl when you allow one method, you automatically deny access to the other methods and when you deny one you allow the remaining methods.\n\n\nThus denying one method is faster than allowing three or four methods. When it comes to blogs we only need them to read therefore we allow GET methods which means the other methods are denied.\n\n\nFor you to formulate good ACL rules, you need to understand the princple of negation. To allow is to deny and to deny is to allow, confusing right? how can you deny and allow at the same time?. Lets look at this example, if I have 4 methods POST, GET, PUT, DELETE and I deny POST. This is same as saying allow GET,PUT,DELETE and if I allow POST is same as saying deny GET,PUT,DELETE.\n\n\nNow that we have established that lets write our config file. Our nacl.json will look like this.\n\n\n[{\n\n   \n\"group\"\n:\n \n\"admin\"\n,\n\n   \n\"permissions\"\n:\n \n[{\n\n     \n\"resource\"\n:\n \n\"*\"\n,\n\n     \n\"methods\"\n:\n \n\"*\"\n,\n\n     \n\"action\"\n:\n \n\"allow\"\n\n   \n}]\n\n \n},\n\n \n{\n\n   \n\"group\"\n:\n \n\"user\"\n,\n\n   \n\"permissions\"\n:\n \n[\n\n   \n{\n\n     \n\"resource\"\n:\n \n\"users\"\n,\n\n     \n\"methods\"\n:\n \n[\n\n       \n\"DELETE\"\n,\n\n     \n],\n\n    \n\"action\"\n:\n\"deny\"\n\n   \n},\n\n   \n{\n\n     \n\"resource\"\n:\n \n\"users\"\n,\n\n     \n\"methods\"\n:\n \n[\n\n       \n\"GET\"\n,\n\n     \n],\n\n    \n\"action\"\n:\n \n\"allow\"\n\n   \n}]\n\n \n}]",
            "title": "Acl Rules"
        },
        {
            "location": "/documentation/rules/#acl-rules",
            "text": "Express acl uses Rules to define what access should be given to certain user groups over specific resources.  The first step to making acl rules is by creating nacl.json or nacl.yml depending on the syntax you prefer to use. Below is an example of ACL rules using both syntax.  JSON syntax  [{ \n   \"group\" :   \"admin\" , \n   \"permissions\" :   [{ \n     \"resource\" :   \"*\" , \n     \"methods\" :   \"*\" \n   }], \n   \"action\" :   \"allow\" \n   },   { \n   \"group\" :   \"user\" , \n   \"permissions\" :   [{ \n     \"resource\" :   \"users\" , \n     \"methods\" :   [ \n       \"POST\" , \n       \"GET\" , \n       \"PUT\" \n     ], \n     \"action\" :   \"deny\" \n   }]  }]   YAML syntax  - group: admin\n  permissions:\n    - resource: *\n      methods: *\n      action: allow\n\n- group: user\n  permissions:\n    - resource: users\n      methods:\n        - GET\n        - POST\n        - DELETE\n      action: deny",
            "title": "ACL Rules"
        },
        {
            "location": "/documentation/rules/#understanding-acl-rules",
            "text": "Its important to Understand each property that consitute an acl. Below is a table that has a Description of each property.     Property  Type  Description      group  string  This property defines the access group to which a user can belong to  e.g  user ,  guest ,  admin ,  trainer . This may vary depending with the architecture of your application.    permissions  Array  This property contains an array of objects that define the resources exposed to a group and the methods allowed/denied    resource  string  This is the resource that we are either giving access to. e.g  blogs  for route  /api/blogs ,  users  for route  /api/users . You can also specify a glob  *  for all resource/routes in your application(recommended for admin users only)    methods  string or Array  This are http methods that a user is allowed or denied from executing.  [\"POST\", \"GET\", \"PUT\"] . use glob  *  if you want to include all http methods.    action  string  This property tell express-acl what action to perform on the permission given. Using the above example, the user policy specifies a deny action, meaning all traffic on route  /api/users  for methods  GET, PUT, POST  are denied, but the rest allowed. And for the admin, all traffic for all resource is allowed.",
            "title": "Understanding ACL rules"
        },
        {
            "location": "/documentation/rules/#how-to-write-effective-acl-rules",
            "text": "ACLs define the way requests will be handled by express acl, therefore its important to ensure that they are well designed to maximise efficiency.In this section we are going to look at how to design a good ACL based on your application needs.  Assuming you have a blog application, and you want to make blogs read only, deny user ability to delete their own account. You want the admin to have all the access on resources.  solution:  admin : \n   resource :   all \n   methods :   all \n   action :   allow  user : \n   resource :   users \n   methods : \n     -   DELETE \n   action :   deny \n\n   resource :   blogs \n   methods : \n     -   GET \n   action :   allow   Explanation  The admin group has access to all resource and can perform all operation on any resource. Therefore, we need to allow all resources and methods. However, the user group is allowed to only read the blogs, create, read and update their own user profiles.  You may ask, why did we apply deny action on DELETE method instead of allowing other HTTP methods? In express-acl when you allow one method, you automatically deny access to the other methods and when you deny one you allow the remaining methods.  Thus denying one method is faster than allowing three or four methods. When it comes to blogs we only need them to read therefore we allow GET methods which means the other methods are denied.  For you to formulate good ACL rules, you need to understand the princple of negation. To allow is to deny and to deny is to allow, confusing right? how can you deny and allow at the same time?. Lets look at this example, if I have 4 methods POST, GET, PUT, DELETE and I deny POST. This is same as saying allow GET,PUT,DELETE and if I allow POST is same as saying deny GET,PUT,DELETE.  Now that we have established that lets write our config file. Our nacl.json will look like this.  [{ \n    \"group\" :   \"admin\" , \n    \"permissions\" :   [{ \n      \"resource\" :   \"*\" , \n      \"methods\" :   \"*\" , \n      \"action\" :   \"allow\" \n    }] \n  }, \n  { \n    \"group\" :   \"user\" , \n    \"permissions\" :   [ \n    { \n      \"resource\" :   \"users\" , \n      \"methods\" :   [ \n        \"DELETE\" , \n      ], \n     \"action\" : \"deny\" \n    }, \n    { \n      \"resource\" :   \"users\" , \n      \"methods\" :   [ \n        \"GET\" , \n      ], \n     \"action\" :   \"allow\" \n    }] \n  }]",
            "title": "How to write effective ACL Rules"
        },
        {
            "location": "/documentation/status-and-responses/",
            "text": "Status codes and responses\n\n\nExpress acl return  status codes and responses when authorization fails. In this section We will look into these codes and scenarios that might trigger such responses.\n\n\nWhen Authorization fails,this module returns a json response with the following properties.\n\n\n\n\nstatus\n\n\nsuccess\n\n\nMessage\n\n\n\n\nMissing role\n\n\nExpress acl uses user's role to match the approriate policy to use. Therefore it is required that each use object to have a role defined. However if the user role is not defined, Express acl will deny that user access to the system.\n\n\n{\n\n  \n\"status\"\n:\n \n\"Access Denied\"\n,\n\n  \n\"success\"\n:\n \nfalse\n,\n\n  \n\"message\"\n:\n\"REQUIRED: Role not found\"\n\n\n}\n\n\n\n\n\n\nThis error will also return a status of \n404\n\n\nMissing Group\n\n\nPolicies are defined under user groups. This enables us to group users using roles and define policies through groups insted of doing it per user. If a user group is not defined this means that users of that role will not be gived access to the system. Therefore if you have a role associated to users, ensure that such role has been defined in your rules configurations.\n\n\n{\n\n  \n\"status\"\n:\n \n\"Access Denied\"\n,\n\n  \n\"success\"\n:\n \nfalse\n,\n\n  \n\"message\"\n:\n\"REQUIRED: Role not found\"\n\n\n}\n\n\n\n\n\n\nThis error will also return a status of \n404\n.\n\n\nUnauthorized access.\n\n\nWhen a user is trying to access a resource that they are not allowed access to, Express acl will deny access to that a resource and send status of \n403\n with JSON response as follows.\n\n\n{\n\n  \n\"status\"\n:\n \n\"Access Denied\"\n,\n\n  \n\"success\"\n:\n \nfalse\n,\n\n  \n\"message\"\n:\n\"Unauthorized access\"\n\n\n}",
            "title": "Status Codes and Responses"
        },
        {
            "location": "/documentation/status-and-responses/#status-codes-and-responses",
            "text": "Express acl return  status codes and responses when authorization fails. In this section We will look into these codes and scenarios that might trigger such responses.  When Authorization fails,this module returns a json response with the following properties.   status  success  Message",
            "title": "Status codes and responses"
        },
        {
            "location": "/documentation/status-and-responses/#missing-role",
            "text": "Express acl uses user's role to match the approriate policy to use. Therefore it is required that each use object to have a role defined. However if the user role is not defined, Express acl will deny that user access to the system.  { \n   \"status\" :   \"Access Denied\" , \n   \"success\" :   false , \n   \"message\" : \"REQUIRED: Role not found\"  }   This error will also return a status of  404",
            "title": "Missing role"
        },
        {
            "location": "/documentation/status-and-responses/#missing-group",
            "text": "Policies are defined under user groups. This enables us to group users using roles and define policies through groups insted of doing it per user. If a user group is not defined this means that users of that role will not be gived access to the system. Therefore if you have a role associated to users, ensure that such role has been defined in your rules configurations.  { \n   \"status\" :   \"Access Denied\" , \n   \"success\" :   false , \n   \"message\" : \"REQUIRED: Role not found\"  }   This error will also return a status of  404 .",
            "title": "Missing Group"
        },
        {
            "location": "/documentation/status-and-responses/#unauthorized-access",
            "text": "When a user is trying to access a resource that they are not allowed access to, Express acl will deny access to that a resource and send status of  403  with JSON response as follows.  { \n   \"status\" :   \"Access Denied\" , \n   \"success\" :   false , \n   \"message\" : \"Unauthorized access\"  }",
            "title": "Unauthorized access."
        },
        {
            "location": "/contribution/",
            "text": "",
            "title": "Contribution"
        }
    ]
}